{"version":3,"sources":["../src/dbconnector.ts"],"names":[],"mappings":"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","file":"dbconnector.js","sourcesContent":["/**\n * A Connector exposes the interface toward the webserver\n * to manage multiple conversations\n */\n'use strict';\n\n// setup a parallel pool.\n\nimport * as assert from 'assert';\nconst path = require('path');\n\nimport * as _ from 'lodash';\n\nvar jinst = require('jdbc/lib/jinst');\n\nimport { Monitor } from './monitor';\n\nif (!jinst.isJvmCreated()) {\n  console.log('adding stuff in main!now');\n  jinst.addOption('-Xrs');\n  var root = `${__dirname}/../../jdbcsql_throughput`; // eslint-disable-line\n  //root = path.dirname(require.resolve('jdbcsql_throughput/package.json'));\n  console.log('here driver dir: '+   root + '/drivers/hsqldb.jar');\n  jinst.setupClasspath([\n    root + '/drivers/hsqldb.jar',\n    root + '/drivers/derby.jar',\n    root + '/drivers/derbyclient.jar',\n    root + '/drivers/derbytools.jar']);\n}\n\n\nvar config_path = path.dirname(require.resolve('jdbcsql_throughput/package.json'));\nconsole.log('path to jdbc ' + config_path);\nvar config = require(config_path + '/gen/configs/config_derby.js').config;\n\n\nimport { ParallelPool, SQLExec, ParallelExecutor, Constants } from 'jdbcsql_throughput';\nimport * as jdbcsql_throughput from 'jdbcsql_throughput';\nimport { IResultRec } from '../../jdbcsql_throughput/gen/constants';\n//import { Constants } from 'jdbcsql_throughput';\n//import { IParallelExecutor } from '../../jdbcsql_throughput/gen/constants';\n//import { ParallelExec } from '../../jdbcsql_throughput/gen/parallel_exec';\n//import { SQLExec } from '../../jdbcsql_throughput/gen/sqlexec';\n\n\n// strongly recommended to load this first, as it brings up the jvm,\n// setting classpath variables!\n//const config = require(root + '/configs/config_derby.js').config;\n//var ParallelExec = require('jdbcsql_throughput').ParallelExec;\n//const ParallelPool = require('jdbcsql_throughput').ParallelPool;\n\n//const SQLExec = require(root + '/qlexec_remote.js');\n\nconsole.log('config' + JSON.stringify(config));\n\nvar Pool = require('jdbc');\n//const CSQLExec = require('jdbcsql_throughput').SQLExec;\n\n//var CParallelExec = require('jdbcsql_throughput').SQLExec;\n//var CParallelPool = jdbcsql_throughput.ParallelPool.ParallelPool;\n//const CSQLExec = require('jdbcsql_throughput').SQLExec.SQLExec;\n\nconsole.log('config' + JSON.stringify(config));\nconsole.log('config' + JSON.stringify(config));\n\nvar testpool : any = undefined;\nvar executor : SQLExec.SQLExec = undefined;\nvar parpool : ParallelPool.ParallelPool = undefined; //= new  ParallelPool(4, testpool, config, undefined );\nvar parallel_exec : Constants.IParallelExecutor = undefined;\n\n/*\nvar testpool = new Pool(config, function(err, ok) {\n  console.log('here we try pool' + err);\n  console.log('here we try pool' + ok);\n});\n*/\n\nexport function Setup(nrexec :number, explicitconfig? : any) {\n  var cfg = explicitconfig || config;\n  testpool = new Pool(cfg, function(err, ok) {\n    console.log('here we try pool' + err);\n    console.log('here we try pool' + ok);\n   });\n  executor = new SQLExec.SQLExec({});\n  parpool = new  ParallelPool.ParallelPool(nrexec, testpool, config, undefined );\n  parallel_exec = new ParallelExecutor.ParallelExec(parpool.getExecutors());\n}\n\n/*\n executor = new SQLExec({});\n parpool = new  ParallelPool(4, testpool, config, undefined );\n parallel_exec = new ParallelExec.ParallelExec(parpool.getExecutors());\n\n\n testpool = new Pool(config, function(err, ok) {\n  console.log('here we try pool' + err);\n  console.log('here we try pool' + ok);\n});\n*/\n/*\n\nvar executor = new SQLExec({});\nvar parpool = new  ParallelPool(4, testpool, config, undefined );\nvar parallel_exec = new ParallelExec.ParallelExec(parpool.getExecutors());\n*/\n\nexport interface IRecord {\n    time:  number;\n    QPS: number;\n    FAIL: number;\n    MEM: number;\n    CPU: number;\n    DUR: number,\n    NP: number,\n    PAR: number,\n    MAXMEM: number\n};\n\nvar MAXMEM = 10;\nvar CPU = 80;\nvar MEM = 1;\nvar FAIL = 0;\nvar QPS = 0;\nvar DUR = 0;\nvar PAR = 0;\n\nfunction genRndRec( )\n{\n  var time = ( Date.now() / 100) % 10000;\n MAXMEM += 10;\n QPS = (MAXMEM % 100 - 50)* Math.sin(time / 1000);\n MEM = 100 * Math.abs(Math.sin(time/30));\n CPU = 100 * Math.abs(Math.cos(time/29));\n DUR = 100 * Math.abs(Math.cos(time/15));\n FAIL = 25 * Math.abs(Math.cos(time/25));\n time = Date.now();\n var rec = {\n   time : time,\n   QPS : QPS,\n   FAIL : FAIL,\n   MEM: MEM,\n   CPU : CPU,\n   DUR : DUR,\n   NP : 0,\n   PAR : 0,\n  MAXMEM : MAXMEM\n };\n return rec;\n}\n\n\nexport interface ISettings {\n  parallel: number,\n  continuous: boolean // running or not\n}\n\nexport interface ResultRec {\n  time : number,\n  rc : boolean\n};\n\nexport interface IConvRec {\n  statement?: string,\n  settings?: ISettings,\n  handle? : string,\n  last_stop_t : number,\n  last_switch_t : number, // time of last parallel alteration\n  delta_t : number,\n  lastQPS : number,\n  lastFAIL : number,\n  results : ResultRec[]\n}\n\nexport interface IMessage {\n  conversationID: string,\n  sourcedest?: string,  // key for source/destination\n  user: string,\n  body: any\n};\n\n/* nonglobal process:true*/\n//var BotBuilder = require('botbuilder');\n//var Message = BotBuilder.Message;\nexport class Connector {\n  answerHook: any = {};\n  answerHooks: any = {};\n  conversationID: string = \"\";\n  quitHook: any = undefined;\n  intervals: Map<string, IConvRec> = new Map<string, IConvRec>();\n\n  qps_avg : number = 10000; // time to calculate QPS averages\n  monitor : Monitor;\n\n  constructor(options: any) {\n    if(!parallel_exec) {\n      console.log('running default setup, you may want to invoke Setup');\n      Setup(4);\n    }\n    this.qps_avg = (options && options.qps_avg) || 10000;\n    //this.replyCnt = 0;\n    this.answerHooks = {};\n    this.monitor = new Monitor(parallel_exec);\n    //this.user = options && options.user || 'user1';\n    //this.bot = options && options.bot || 'fdevstart';\n    this.conversationID = options && options.conversationID || ('' + Date.now());\n  };\n  setAnswerHook(answerHook, id): void {\n    console.log('register answerhook for ' + id);\n    if (id) {\n      this.answerHooks[id] = answerHook;\n    }\n    this.answerHook = answerHook;\n  };\n  setQuitHook(quitHook) {\n    this.quitHook = quitHook;\n  };\n\n  /**\n   * Expose the parallel executor\n   */\n  getParallelExecutor() : Constants.IParallelExecutor {\n    return parallel_exec;\n  };\n\n  isActive(conversationID: string) : boolean {\n    return this.intervals.has(conversationID);\n  }\n\n  disconnect(conversationID: string) {\n    var that = this;\n    if (that.intervals.has(conversationID)) {\n      var u = that.intervals.get(conversationID);\n      if(u) {\n        parallel_exec.stopOp(u.handle);\n      }\n      that.intervals.delete(conversationID);\n      this.adjustMonitor();\n      return; //running!\n    }\n  }\n\n  getOneStatement(statement: string) {\n    var arr = statement.split(\";\");\n    var res = arr[arr.length - 1];\n    res = res.trim();\n    var i = arr.length - 2;\n    if (res.length == 0 && i >= 0) {\n      res = arr[i];\n      --i;\n    }\n    res = res.trim();\n    res = res + \";\";\n    console.log('rectified statement ' + res);\n    return res;\n  };\n\n  getConvRecord(conversationID : string) : IConvRec {\n    assert(this.intervals.has(conversationID));\n    return this.intervals.get(conversationID);\n  };\n\n  getDefaultConvRecord(conversationID: string): IConvRec {\n    var that = this;\n    if (that.intervals.has(conversationID)) {\n      return that.intervals.get(conversationID);\n    }\n    var res: IConvRec = {\n      last_stop_t: Date.now(),\n      delta_t: -Date.now(),\n      last_switch_t : Date.now(),\n      statement : undefined,\n      handle : undefined,\n      results : [],\n      lastFAIL : 0,\n      lastQPS : 0\n    };\n    return res;\n  }\n\n  getLastRecords(currentRec : IConvRec) : ResultRec[] {\n    var that = this;\n    if(currentRec.results.length > 100) {\n      currentRec.results = currentRec.results.slice(currentRec.results.length - 100);\n    }\n    var last_time = currentRec.results.length ? currentRec.results[currentRec.results.length-1].time : Date.now();\n    var last3sRecords = currentRec.results.filter( r => r.time > (last_time - that.qps_avg));\n    if(last3sRecords.length < 10 ) {\n      last3sRecords = currentRec.results.filter( (r, index) => (index + 10 > currentRec.results.length));\n    }\n    console.log('got ' + last3sRecords.length + ' records within last ' + this.qps_avg + ' sec');\n    return last3sRecords;\n  }\n\n  getQPS(currentRec : IConvRec) : number {\n    var last_time = currentRec.results.length ? currentRec.results[currentRec.results.length-1].time : Date.now();\n    var last3sRecords = this.getLastRecords(currentRec);\n    console.log('got ' + last3sRecords.length + ' records within last ' + this.qps_avg + ' sec');\n    const MIN = 1000*60;\n    if(last3sRecords.length > 5) {\n      var delta_t =  (last3sRecords[last3sRecords.length-1].time - last3sRecords[0].time );\n      currentRec.lastQPS = (delta_t > 0) ? (last3sRecords.length * MIN /  delta_t) : currentRec.lastQPS;\n    }\n    var lastSinceSwitchRecords = currentRec.results.filter( r => r.time > currentRec.last_switch_t);\n    var otherQPS = currentRec.lastQPS;\n    if(lastSinceSwitchRecords.length > 4) {\n      otherQPS = lastSinceSwitchRecords.length * MIN / \n      (lastSinceSwitchRecords[lastSinceSwitchRecords.length-1].time - lastSinceSwitchRecords[0].time);\n    }\n    console.log('*** here qps avg' + currentRec.lastQPS + ' here total ' + otherQPS);\n    currentRec.lastQPS = currentRec.lastQPS;\n    return currentRec.lastQPS;\n  }\n\n  getFAIL(currentRec : IConvRec) : number {\n    // count records within a window of 3s\n    var last3sRecords = this.getLastRecords(currentRec);\n    var last3sRecordsFail = last3sRecords.filter( r => !r.rc);\n\n    if(last3sRecords.length > 5) {\n      currentRec.lastFAIL = Math.floor((100*last3sRecordsFail.length )/ last3sRecords.length);\n    }\n    return currentRec.lastFAIL;\n  }\n\n\n  genRec(rc: boolean, currentRec : IConvRec) : IRecord{\n\n    var rec = this.monitor.getLastRecord();\n    var clone : IRecord = Object.assign({}, rec);\n    // calculate failed and query averages:\n    clone.QPS = this.getQPS(currentRec);\n    clone.FAIL = this.getFAIL(currentRec);\n    clone.PAR = currentRec.settings.parallel;\n    if(currentRec.results.length == 0) {\n      clone.time = Date.now();\n    } else {\n      clone.time = currentRec.results[currentRec.results.length- 1].time;\n    }\n    var tx =  Date.now() + currentRec.delta_t;\n    console.log( 'time is' + tx + ' ' + currentRec.delta_t);\n    clone.time = tx;\n    return clone;\n  }\n\n  stopParallel(conversationID : string) {\n    var convRec = this.getConvRecord(conversationID);\n    parallel_exec.stopOp(convRec.handle);\n    convRec.settings.continuous = false;\n    convRec.last_stop_t = Date.now();\n    this.adjustMonitor();\n  }\n\n  changeParallel(conversationID: string, statement: string, settings: ISettings) {\n    var convRec = this.getConvRecord(conversationID);\n    if(!convRec || !convRec.settings.continuous) {\n      return;\n    }\n    convRec.statement = this.getOneStatement(statement);\n    if(convRec.settings.parallel != settings.parallel) {\n      console.log('CHANGING PARALLEL ' + settings.parallel);\n      convRec.settings.parallel = settings.parallel;\n      parallel_exec.changeParallelOp(convRec.handle, settings.parallel);\n    }\n  }\n\n  startParallel(conversationID: string, user: string, statement: string, settings: ISettings)  : IConvRec {\n    var that = this;\n    var statement = this.getOneStatement(statement);\n    var currentRec = this.getDefaultConvRecord(conversationID);\n    var lastOp_t = Date.now();\n    var handle = parallel_exec.startOpRepeat(\n      conversationID,\n      statement,\n      settings.parallel,\n      undefined,\n      {\n        progress: function (op: any /*ParallelOp*/, rc: boolean) {\n          console.log('progress ')\n          if (!that.isActive(conversationID)) {\n            return;\n          }\n\n   \n          console.log('sending response' + conversationID);\n          var currentRec = that.getConvRecord(conversationID);\n          var adjustedTime = Date.now() + currentRec.delta_t;\n          currentRec.results.push( { time : adjustedTime, rc: rc});\n          if ( Date.now() - lastOp_t < 500) {\n            return;\n          }\n          lastOp_t = Date.now();          \n          var rec = that.genRec(rc, currentRec);\n          rec.PAR = res.settings.parallel;\n          var response: IMessage = {\n            conversationID: conversationID,\n            user: user,\n            sourcedest: \"CHART\",\n            body: {\n              record: rec,\n              rc: rc,\n            }\n          };\n          that.send([response]);\n        },\n        done: function () { }\n      }\n    );\n    var delta = Date.now() - currentRec.last_stop_t;\n    console.log(' !! last stop is ' + (( Date.now() - currentRec.last_stop_t) / 1000) + 'seconds gone');\n    console.log(' !!!!total compensation ' + (Date.now() + currentRec.delta_t - delta)+ ' ');\n    var res: IConvRec = {\n      statement: statement,\n      settings: settings,\n      last_stop_t: Date.now(),\n      last_switch_t : 0, // see below\n      handle: handle,\n      delta_t: (currentRec.delta_t  - delta),\n      lastFAIL : currentRec.lastFAIL,\n      lastQPS : currentRec.lastQPS,\n      results: currentRec.results\n    };\n    res.last_switch_t = Date.now() + res.delta_t; \n    return res;\n  }\n\n  tmonitor : any;\n\n  startMonitor() {\n    //\n    this.monitor.startMonitor();\n    console.log('start monitor');\n    /*\n    this.tmonitor = setInterval(function() {\n      genRndRec();\n    }, 100);*/\n  }\n  stopMonitor() {\n    this.monitor.stopMonitor();\n  /*  if( parallel_exec.getOp(\"monitor\")) {\n      parallel_exec.stopOp(\"monitor\");\n    }\n    clearInterval(this.tmonitor); */\n  }\n\n  adjustMonitor() {\n    var that = this;\n    // TODO\n    // check all handels, if any running -> assure monitor runs,\n    // otherwise stop\n    var active = Array.from(this.intervals.keys()).filter(\n      (key) => ( that.intervals.get(key).settings.continuous ));\n    console.log(' have ' + active.length + ' conversations');\n      if(active.length == 0) {\n        that.stopMonitor();\n      } else {\n          that.startMonitor();\n      }\n  }\n\n  processMessage(msg: IMessage) {\n    var that = this;\n    var t = Date.now();\n    console.log('got message' + JSON.stringify(msg));\n    if (msg.body.sourcedest == \"EXEC\") {\n      console.log(' run statement once ' + msg.body.statement);\n\n      var statement = this.getOneStatement(msg.body.statement);\n      parallel_exec.startOpSequential(\"abc\",\n      statement,\n       { done : function(op) {\n         console.log('but we are done' + JSON.stringify(op.lastRC));\n          },\n         progress : function(op,rc) {\n          console.log('end sequential ' + op.lastRC + ' ' + op.lastResult);\n          var lr = op.lastResult;\n          if(op.lastRC && _.isArray(op.lastResult)) {\n            lr = (new SQLExec.SQLExec({})).makeAsciiTable(op.lastResult);\n          }\n          var response: IMessage =\n          {\n            conversationID: msg.conversationID,\n            user: msg.user,\n            sourcedest: msg.sourcedest || \"DIALOG\",\n            body:  lr\n          };\n          console.log(JSON.stringify(response, undefined, 2));\n          that.send([response]);\n       }});\n      return;\n    }\n    if (msg && msg.body.sourcedest == \"PAR\" && msg.body && msg.body.settings) {\n      if (msg.body.op == \"START\") {\n        console.log(' Start parallel statement' + msg.body.statement);\n        console.log('registering interval under ' + msg.conversationID);\n        var r = this.startParallel(\n          msg.conversationID,\n          msg.user,\n          msg.body.statement,\n          msg.body.settings);\n        if (that.intervals.has(msg.conversationID)) {\n            var stopped = that.intervals.get(msg.conversationID);\n            assert(stopped.settings.continuous == false);\n            parallel_exec.stopOp(stopped.handle);\n            stopped.settings = r.settings;\n            stopped.handle = r.handle;\n            stopped.delta_t = r.delta_t;\n            stopped.last_stop_t = r.last_stop_t;\n            assert(stopped.settings.continuous);\n        } else {\n            that.intervals.set(msg.conversationID,r);\n        }\n\n        that.adjustMonitor();\n        /*setInterval( () => {\n          var rec = genRec();\n          rec.NP = msg.body.settings.parallel;\n          rec.PAR = rec.NP /2;\n          var response2 : IMessage =\n          {\n            conversationID : msg.conversationID ,\n            user : msg.user,\n            sourcedest : \"CHART\",\n            body : rec\n          };\n          that.send([response2]);\n        }, 4000 / msg.body.settings.parallel); */\n      }\n      else if (msg.body.op == \"STOP\") {\n        console.log('stop interval under ' + msg.conversationID);\n        if (that.intervals.has(msg.conversationID)) {\n          console.log(' found conversation, ')\n          this.stopParallel(msg.conversationID);\n          return; //running!\n        }\n      }\n      else if (msg.body.op == \"CHANGE\") {\n        if (that.intervals.has(msg.conversationID)) {\n          this.changeParallel(msg.conversationID, msg.body.statement,\n            msg.body.settings);\n          return; //running!\n        }\n      }\n    }\n  }\n\n  onEvent = function (handler) {\n    this.handler = handler;\n  };\n\n  send(messages: IMessage[], done?: any) {\n    for (var i = 0; i < messages.length; i++) {\n      var msg = messages[i];\n      if (msg.body) {\n        if (msg.conversationID && this.answerHooks[msg.conversationID]) {\n          this.answerHooks[msg.conversationID](msg.conversationID, msg);\n        } else {\n          console.log('where is the answerhook for ' + msg.conversationID);\n          this.answerHook(this.conversationID, msg);\n        }\n        //log(msg.text);\n      }\n      /*\n      if (msg.attachments && msg.attachments.length > 0) {\n        for (var k = 0; i < msg.attachments.length; i++) {\n          if (k > 0) {\n            //console.log();\n          }\n          //renderAttachment(msg.attachments[k]);\n        }\n      }*/\n    }\n    if (done) {\n      done(null);\n    }\n  };\n}\n"],"sourceRoot":"."}